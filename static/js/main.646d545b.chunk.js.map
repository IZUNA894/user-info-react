{"version":3,"sources":["ninjs.js","addninja.js","App.js","serviceWorker.js","index.js"],"names":["App","ninjas","this","props","length","ninjaDiv","map","ninja","className","key","id","name","age","belt","onClick","deleteNinja","React","Component","state","undefined","handleClick","e","console","log","target","setState","value","handleSubmit","preventDefault","Math","random","addNinja","onSubmit","type","onChange","addNinjaToList","item","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mQAkCeA,E,iLA/BJ,IAAD,OACJC,EAASC,KAAKC,MAAMF,OACxB,GAAkB,GAAfA,EAAOG,OAER,IAAIC,EAAW,2BAGbA,EAAYJ,EAAOK,KAAI,SAACC,GAC1B,OACE,yBAAKC,UAAU,QAAQC,IAAOF,EAAMG,IAApC,QACMH,EAAMI,KACZ,6BAFA,OAGKJ,EAAMK,IACX,6BAJA,QAKML,EAAMM,KACZ,6BACA,4BAAQC,QAAU,WAAM,EAAKX,MAAMY,YAAYR,EAAMG,MAArD,cAMJ,OACE,yBAAKF,UAAU,OACb,6BACGH,Q,GA1BSW,IAAMC,W,OCiCTjB,E,2MA/BbkB,MAAM,CACJP,UAAKQ,EACLP,SAAIO,EACJN,UAAKM,EACLT,GAAG,M,EAELU,YAAc,SAACC,GACbC,QAAQC,IAAIF,EAAEG,OAAOb,MACrB,EAAKc,SAAL,eAAgBJ,EAAEG,OAAOb,KAAMU,EAAEG,OAAOE,S,EAE1CC,aAAe,SAACN,GACdA,EAAEO,iBACFN,QAAQC,IAAI,EAAKL,OACjB,EAAKO,SAAS,CAACf,GAAiB,EAAdmB,KAAKC,WACvB,EAAK3B,MAAM4B,SAAS,EAAKb,Q,wEAKzB,OACE,6BACA,0BAAMc,SAAW9B,KAAKyB,cACtB,2BAAOM,KAAK,OAAOtB,KAAK,OAAOuB,SAAUhC,KAAKkB,cAC9C,2BAAOa,KAAK,SAAStB,KAAK,MAAMuB,SAAUhC,KAAKkB,cAC/C,2BAAOa,KAAK,OAAOtB,KAAK,OAAOuB,SAAUhC,KAAKkB,cAC9C,4BAAQa,KAAK,UAAb,iB,GA1BYjB,IAAMC,WCsCTjB,E,2MAnCbkB,MAAM,CACJjB,OAAO,CAAC,CAAEU,KAAK,MAAMC,IAAI,GAAGC,KAAK,QAAQH,GAAG,GACrC,CAAEC,KAAK,MAAMC,IAAI,GAAGC,KAAK,MAAMH,GAAG,GAClC,CAAEC,KAAK,WAAWC,IAAI,GAAGC,KAAK,OAAOH,GAAG,K,EAGjDyB,eAAgB,SAACC,GACf,IAAInC,EAAS,EAAKiB,MAAMjB,OACxBA,EAAM,sBAAOA,GAAP,CAAcmC,IACpB,EAAKX,SAAS,CAACxB,Y,EAGjBc,YAAc,SAACL,GACb,IAAIT,EAAS,EAAKiB,MAAMjB,OACxBA,EAAQA,EAAOoC,QAAO,SAACD,GACrB,OAAO1B,GAAI0B,EAAK1B,MAElB,EAAKe,SAAS,CAACxB,Y,wEAIjB,OACE,yBAAKO,UAAU,OACb,sDAGA,6BACA,kBAAE,EAAF,CAAQP,OAAQC,KAAKgB,MAAMjB,OAAQc,YAAab,KAAKa,cACrD,kBAAE,EAAF,CAAWgB,SAAU7B,KAAKiC,uB,GA7BdnB,IAAMC,WCOJqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.646d545b.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nclass App extends React.Component {\r\n  render(){\r\n  var ninjas = this.props.ninjas;\r\n  if(ninjas.length==0)\r\n  {\r\n    var ninjaDiv = \"no to do left today\";\r\n  }\r\n  else{\r\n  var ninjaDiv =  ninjas.map((ninja)=>{\r\n    return(\r\n      <div className=\"ninja\" key= { ninja.id}>\r\n      name:{ninja.name}\r\n      <br/>\r\n      age:{ninja.age}\r\n      <br/>\r\n      belt:{ninja.belt}\r\n      <br/>\r\n      <button onClick={ ()=>{ this.props.deleteNinja(ninja.id)} } >delete</button>\r\n\r\n      </div>\r\n    )\r\n  })\r\n};\r\n  return (\r\n    <div className=\"App\">\r\n      <div >\r\n       { ninjaDiv}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n}\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nclass App extends React.Component {\r\n  state={\r\n    name:undefined,\r\n    age:undefined,\r\n    belt:undefined,\r\n    id:null\r\n  }\r\n  handleClick = (e)=>{\r\n    console.log(e.target.name);\r\n    this.setState({[e.target.name]:e.target.value})\r\n  }\r\n  handleSubmit = (e)=>{\r\n    e.preventDefault();\r\n    console.log(this.state);\r\n    this.setState({id:Math.random()*5})\r\n    this.props.addNinja(this.state);\r\n  }\r\n  render(){\r\n\r\n\r\n    return(\r\n      <div>\r\n      <form onSubmit={ this.handleSubmit }>\r\n      <input type=\"text\" name=\"name\" onChange={this.handleClick}/>\r\n      <input type=\"number\" name=\"age\" onChange={this.handleClick}/>\r\n      <input type=\"text\" name=\"belt\" onChange={this.handleClick}/>\r\n      <button type=\"submit\" > submit</button>\r\n      </form>\r\n      </div>\r\n    )\r\n  }\r\n  }\r\nexport default App\r\n","import React from 'react';\nimport Ninja from \"./ninjs.js\"\nimport ReactDOM from 'react-dom';\nimport AddNinja from './addninja.js'\n\nclass App extends React.Component {\n  state={\n    ninjas:[{ name:\"leo\",age:34,belt:\"black\",id:1},\n           { name:\"rio\",age:45,belt:\"red\",id:2},\n           { name:\"lancelot\",age:21,belt:\"pink\",id:3}\n    ]\n  }\n  addNinjaToList =(item)=>{\n    var ninjas = this.state.ninjas;\n    ninjas = [...ninjas,item];\n    this.setState({ninjas});\n\n  }\n  deleteNinja = (id)=>{\n    var ninjas = this.state.ninjas;\n    ninjas= ninjas.filter((item)=>{\n      return(id!=item.id);\n    })\n    this.setState({ninjas});\n  }\n  render(){\n\n  return (\n    <div className=\"App\">\n      <div >\n      hello ji,\n      my self tony\n      <br/>\n      < Ninja ninjas={this.state.ninjas} deleteNinja={this.deleteNinja}/>\n      < AddNinja addNinja={this.addNinjaToList}/>\n      </div>\n    </div>\n  );\n};\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}